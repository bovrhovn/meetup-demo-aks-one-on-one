//create a namespace to play in
kubectl create namespace play

//play around a bit
kubectl top node
kubectl top pod --all-namespaces
kubectl run web --image=meetupsul.azurecr.io/web:novalidate --port=80 -n play
kubectl get pods -o='custom-columns=PODS:.metadata.name,Images:.spec.containers[*].image' -n play
kubectl describe pod web -n play
kubectl port-forward web 8083:80 -n play
kubectl exec web -n play -- ls 
kubectl expose pod web --type=LoadBalancer --port=80 -n play
kubectl delete pod <nameofpod> -n play

SQL='Server=tcp:meetup-sul.database.windows.net,1433;Initial Catalog=SulDb;Persist Security Info=False;User ID=sul;Password=Pa$$w0rd1!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
kubectl run web --env="DataOptions__ConnectionString=$SQL" --env="AuthOptions__ConnectionString=ProdKey" --image=meetupsul.azurecr.io/web:novalidate --port=80 -n play
kubectl exec web env

--env="AuthOptions__BaseUrl="
kubectl run api --generator=run-pod/v1 --env="DataOptions__ConnectionString=$SQL" --env="AuthOptions__ConnectionString=ProdKey" --image=ceecsa.azurecr.io/ew/status:v2 --port=5003 -n play
kubectl expose pod status --name=ewstatus --type=ClusterIP --port=80 --target-port=5003 -n play
kubectl delete pod <nameofpod> -n play

//create same, but without generator
kubectl run web --image=ceecsa.azurecr.io/ew/web:v1 --env="SqlDataConnection=$SQL" --env="StorageOptions__ConnectionString=$STORAGE" --port=80 -n play

//create deployments
ka 2-web-deploy.yaml

//create secrets
ka 3-web-secrets.yaml

//ingress
kubectl create namespace ingress

helm install nginx-ingress stable/nginx-ingress \
    --namespace ingress \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux

//get public IP
kubectl get service nginx-ingress-controller --namespace ingress -w

//edit web and change from load balancer to ClusterIP

//do the ingress rule
kubectl apply -f 11-router.yaml

kubectl apply -f 12-tls.yaml
kubectl apply -f 13-tls-router.yaml

//add additional host and add host rule to the structure - just show how to configure it
kubectl apply -f 14-tls-additional-host.yaml
kubectl describe cert ai-cert

//enable seeing live logs for ClusterIP
//create hpa
kubectl apply -f 15-hpa.yaml

//check hpa
k get hpa -w

//update web with scale
kubectl apply -f 16-web-deploy-big.yaml

//enable cluster autoscaler
AKS_CLUSTER_NAME=xxxxxxxx
az aks update \
--resource-group $RESOURCE_GROUP \
--name $AKS_CLUSTER_NAME  \
--enable-cluster-autoscaler \
--min-count 3 \
--max-count 5

//show memory and utilization for containers
k top node
k top pod --all-namespaces
kubectl top pod --all-namespaces --containers=true

kubectl create secret docker-registry regcred --docker-server=ceecsa.azurecr.io --docker-username=ceecsa --docker-password=1mhcJ/UriMlKjatQNe9pLKu6WGARqMWy --docker-email=bovrhovn@microsoft.com
ka 20-virtual-kubelet.yaml

kubectl run --rm -it --image=alpine network-policy  
wget http://web

ka 22-azure-policy.yaml

kubectl run --rm -it --generator=run-pod/v1 --image=alpine network-policy  
wget --timeout=2 http://web